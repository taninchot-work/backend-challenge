// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_user_repository

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/taninchot-work/backend-challenge/internal/entity"
)

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function for the type UserRepository
func (_mock *UserRepository) DeleteUser(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *UserRepository_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserRepository_DeleteUser_Call {
	return &UserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserRepository_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *UserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_DeleteUser_Call) Return(err error) *UserRepository_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id string) error) *UserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *UserRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserRepository_GetUserByEmail_Call {
	return &UserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByEmail_Call) Return(user entity.User, err error) *UserRepository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserRepository_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (entity.User, error)) *UserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUserById(ctx context.Context, id string) (entity.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type UserRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *UserRepository_Expecter) GetUserById(ctx interface{}, id interface{}) *UserRepository_GetUserById_Call {
	return &UserRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *UserRepository_GetUserById_Call) Run(run func(ctx context.Context, id string)) *UserRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserById_Call) Return(user entity.User, err error) *UserRepository_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserRepository_GetUserById_Call) RunAndReturn(run func(ctx context.Context, id string) (entity.User, error)) *UserRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserList provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUserList(ctx context.Context, offset int, limit int) ([]entity.User, error) {
	ret := _mock.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUserList")
	}

	var r0 []entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.User, error)); ok {
		return returnFunc(ctx, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []entity.User); ok {
		r0 = returnFunc(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUserList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserList'
type UserRepository_GetUserList_Call struct {
	*mock.Call
}

// GetUserList is a helper method to define mock.On call
//   - ctx
//   - offset
//   - limit
func (_e *UserRepository_Expecter) GetUserList(ctx interface{}, offset interface{}, limit interface{}) *UserRepository_GetUserList_Call {
	return &UserRepository_GetUserList_Call{Call: _e.mock.On("GetUserList", ctx, offset, limit)}
}

func (_c *UserRepository_GetUserList_Call) Run(run func(ctx context.Context, offset int, limit int)) *UserRepository_GetUserList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UserRepository_GetUserList_Call) Return(users []entity.User, err error) *UserRepository_GetUserList_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *UserRepository_GetUserList_Call) RunAndReturn(run func(ctx context.Context, offset int, limit int) ([]entity.User, error)) *UserRepository_GetUserList_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function for the type UserRepository
func (_mock *UserRepository) SaveUser(ctx context.Context, user entity.User) (entity.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.User) (entity.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type UserRepository_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *UserRepository_Expecter) SaveUser(ctx interface{}, user interface{}) *UserRepository_SaveUser_Call {
	return &UserRepository_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *UserRepository_SaveUser_Call) Run(run func(ctx context.Context, user entity.User)) *UserRepository_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *UserRepository_SaveUser_Call) Return(user1 entity.User, err error) *UserRepository_SaveUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_SaveUser_Call) RunAndReturn(run func(ctx context.Context, user entity.User) (entity.User, error)) *UserRepository_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type UserRepository
func (_mock *UserRepository) UpdateUser(ctx context.Context, user entity.User) (entity.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.User) (entity.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *UserRepository_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserRepository_UpdateUser_Call {
	return &UserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserRepository_UpdateUser_Call) Run(run func(ctx context.Context, user entity.User)) *UserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *UserRepository_UpdateUser_Call) Return(user1 entity.User, err error) *UserRepository_UpdateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, user entity.User) (entity.User, error)) *UserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
