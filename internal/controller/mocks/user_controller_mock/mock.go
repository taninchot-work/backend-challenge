// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_user_controller

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewUserController creates a new instance of UserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserController(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserController {
	mock := &UserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserController is an autogenerated mock type for the UserController type
type UserController struct {
	mock.Mock
}

type UserController_Expecter struct {
	mock *mock.Mock
}

func (_m *UserController) EXPECT() *UserController_Expecter {
	return &UserController_Expecter{mock: &_m.Mock}
}

// GetMe provides a mock function for the type UserController
func (_mock *UserController) GetMe(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// UserController_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type UserController_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
//   - w
//   - r
func (_e *UserController_Expecter) GetMe(w interface{}, r interface{}) *UserController_GetMe_Call {
	return &UserController_GetMe_Call{Call: _e.mock.On("GetMe", w, r)}
}

func (_c *UserController_GetMe_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *UserController_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *UserController_GetMe_Call) Return() *UserController_GetMe_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_GetMe_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *UserController_GetMe_Call {
	_c.Run(run)
	return _c
}

// UserDelete provides a mock function for the type UserController
func (_mock *UserController) UserDelete(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// UserController_UserDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDelete'
type UserController_UserDelete_Call struct {
	*mock.Call
}

// UserDelete is a helper method to define mock.On call
//   - w
//   - r
func (_e *UserController_Expecter) UserDelete(w interface{}, r interface{}) *UserController_UserDelete_Call {
	return &UserController_UserDelete_Call{Call: _e.mock.On("UserDelete", w, r)}
}

func (_c *UserController_UserDelete_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *UserController_UserDelete_Call) Return() *UserController_UserDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_UserDelete_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserDelete_Call {
	_c.Run(run)
	return _c
}

// UserListGet provides a mock function for the type UserController
func (_mock *UserController) UserListGet(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// UserController_UserListGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserListGet'
type UserController_UserListGet_Call struct {
	*mock.Call
}

// UserListGet is a helper method to define mock.On call
//   - w
//   - r
func (_e *UserController_Expecter) UserListGet(w interface{}, r interface{}) *UserController_UserListGet_Call {
	return &UserController_UserListGet_Call{Call: _e.mock.On("UserListGet", w, r)}
}

func (_c *UserController_UserListGet_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserListGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *UserController_UserListGet_Call) Return() *UserController_UserListGet_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_UserListGet_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserListGet_Call {
	_c.Run(run)
	return _c
}

// UserLogin provides a mock function for the type UserController
func (_mock *UserController) UserLogin(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// UserController_UserLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserLogin'
type UserController_UserLogin_Call struct {
	*mock.Call
}

// UserLogin is a helper method to define mock.On call
//   - w
//   - r
func (_e *UserController_Expecter) UserLogin(w interface{}, r interface{}) *UserController_UserLogin_Call {
	return &UserController_UserLogin_Call{Call: _e.mock.On("UserLogin", w, r)}
}

func (_c *UserController_UserLogin_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *UserController_UserLogin_Call) Return() *UserController_UserLogin_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_UserLogin_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserLogin_Call {
	_c.Run(run)
	return _c
}

// UserRegister provides a mock function for the type UserController
func (_mock *UserController) UserRegister(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// UserController_UserRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRegister'
type UserController_UserRegister_Call struct {
	*mock.Call
}

// UserRegister is a helper method to define mock.On call
//   - w
//   - r
func (_e *UserController_Expecter) UserRegister(w interface{}, r interface{}) *UserController_UserRegister_Call {
	return &UserController_UserRegister_Call{Call: _e.mock.On("UserRegister", w, r)}
}

func (_c *UserController_UserRegister_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *UserController_UserRegister_Call) Return() *UserController_UserRegister_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_UserRegister_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserRegister_Call {
	_c.Run(run)
	return _c
}

// UserUpdate provides a mock function for the type UserController
func (_mock *UserController) UserUpdate(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// UserController_UserUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserUpdate'
type UserController_UserUpdate_Call struct {
	*mock.Call
}

// UserUpdate is a helper method to define mock.On call
//   - w
//   - r
func (_e *UserController_Expecter) UserUpdate(w interface{}, r interface{}) *UserController_UserUpdate_Call {
	return &UserController_UserUpdate_Call{Call: _e.mock.On("UserUpdate", w, r)}
}

func (_c *UserController_UserUpdate_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *UserController_UserUpdate_Call) Return() *UserController_UserUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_UserUpdate_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *UserController_UserUpdate_Call {
	_c.Run(run)
	return _c
}
