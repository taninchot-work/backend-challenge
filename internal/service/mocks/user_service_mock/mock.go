// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_user_service

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/taninchot-work/backend-challenge/internal/dto"
)

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function for the type UserService
func (_mock *UserService) DeleteUser(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *UserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserService_DeleteUser_Call {
	return &UserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserService_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *UserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_DeleteUser_Call) Return(err error) *UserService_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserService_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id string) error) *UserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type UserService
func (_mock *UserService) GetUserByID(ctx context.Context, id string) (dto.UserGetMeResponse, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 dto.UserGetMeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (dto.UserGetMeResponse, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) dto.UserGetMeResponse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.UserGetMeResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *UserService_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserService_GetUserByID_Call {
	return &UserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserService_GetUserByID_Call) Run(run func(ctx context.Context, id string)) *UserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByID_Call) Return(userGetMeResponse dto.UserGetMeResponse, err error) *UserService_GetUserByID_Call {
	_c.Call.Return(userGetMeResponse, err)
	return _c
}

func (_c *UserService_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, id string) (dto.UserGetMeResponse, error)) *UserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserList provides a mock function for the type UserService
func (_mock *UserService) GetUserList(ctx context.Context, req dto.UserListGetRequest) (dto.UserListGetResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUserList")
	}

	var r0 dto.UserListGetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UserListGetRequest) (dto.UserListGetResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UserListGetRequest) dto.UserListGetResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.UserListGetResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UserListGetRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_GetUserList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserList'
type UserService_GetUserList_Call struct {
	*mock.Call
}

// GetUserList is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *UserService_Expecter) GetUserList(ctx interface{}, req interface{}) *UserService_GetUserList_Call {
	return &UserService_GetUserList_Call{Call: _e.mock.On("GetUserList", ctx, req)}
}

func (_c *UserService_GetUserList_Call) Run(run func(ctx context.Context, req dto.UserListGetRequest)) *UserService_GetUserList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserListGetRequest))
	})
	return _c
}

func (_c *UserService_GetUserList_Call) Return(userListGetResponse dto.UserListGetResponse, err error) *UserService_GetUserList_Call {
	_c.Call.Return(userListGetResponse, err)
	return _c
}

func (_c *UserService_GetUserList_Call) RunAndReturn(run func(ctx context.Context, req dto.UserListGetRequest) (dto.UserListGetResponse, error)) *UserService_GetUserList_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function for the type UserService
func (_mock *UserService) LoginUser(ctx context.Context, req dto.UserLoginRequest) (dto.UserLoginResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 dto.UserLoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UserLoginRequest) (dto.UserLoginResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UserLoginRequest) dto.UserLoginResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.UserLoginResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UserLoginRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type UserService_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *UserService_Expecter) LoginUser(ctx interface{}, req interface{}) *UserService_LoginUser_Call {
	return &UserService_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, req)}
}

func (_c *UserService_LoginUser_Call) Run(run func(ctx context.Context, req dto.UserLoginRequest)) *UserService_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserLoginRequest))
	})
	return _c
}

func (_c *UserService_LoginUser_Call) Return(userLoginResponse dto.UserLoginResponse, err error) *UserService_LoginUser_Call {
	_c.Call.Return(userLoginResponse, err)
	return _c
}

func (_c *UserService_LoginUser_Call) RunAndReturn(run func(ctx context.Context, req dto.UserLoginRequest) (dto.UserLoginResponse, error)) *UserService_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function for the type UserService
func (_mock *UserService) RegisterUser(ctx context.Context, req dto.UserRegisterRequest) (dto.UserRegisterResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 dto.UserRegisterResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UserRegisterRequest) (dto.UserRegisterResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UserRegisterRequest) dto.UserRegisterResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.UserRegisterResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UserRegisterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type UserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *UserService_Expecter) RegisterUser(ctx interface{}, req interface{}) *UserService_RegisterUser_Call {
	return &UserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, req)}
}

func (_c *UserService_RegisterUser_Call) Run(run func(ctx context.Context, req dto.UserRegisterRequest)) *UserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserRegisterRequest))
	})
	return _c
}

func (_c *UserService_RegisterUser_Call) Return(userRegisterResponse dto.UserRegisterResponse, err error) *UserService_RegisterUser_Call {
	_c.Call.Return(userRegisterResponse, err)
	return _c
}

func (_c *UserService_RegisterUser_Call) RunAndReturn(run func(ctx context.Context, req dto.UserRegisterRequest) (dto.UserRegisterResponse, error)) *UserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type UserService
func (_mock *UserService) UpdateUser(ctx context.Context, id string, req dto.UserUpdateRequest) (dto.UserUpdateResponse, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 dto.UserUpdateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, dto.UserUpdateRequest) (dto.UserUpdateResponse, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, dto.UserUpdateRequest) dto.UserUpdateResponse); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		r0 = ret.Get(0).(dto.UserUpdateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, dto.UserUpdateRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, id interface{}, req interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, req)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, id string, req dto.UserUpdateRequest)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(dto.UserUpdateRequest))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(userUpdateResponse dto.UserUpdateResponse, err error) *UserService_UpdateUser_Call {
	_c.Call.Return(userUpdateResponse, err)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id string, req dto.UserUpdateRequest) (dto.UserUpdateResponse, error)) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
