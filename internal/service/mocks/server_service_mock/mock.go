// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_server_service

import (
	mock "github.com/stretchr/testify/mock"
)

// NewServerService creates a new instance of ServerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerService {
	mock := &ServerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServerService is an autogenerated mock type for the ServerService type
type ServerService struct {
	mock.Mock
}

type ServerService_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerService) EXPECT() *ServerService_Expecter {
	return &ServerService_Expecter{mock: &_m.Mock}
}

// HealthCheck provides a mock function for the type ServerService
func (_mock *ServerService) HealthCheck() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ServerService_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type ServerService_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
func (_e *ServerService_Expecter) HealthCheck() *ServerService_HealthCheck_Call {
	return &ServerService_HealthCheck_Call{Call: _e.mock.On("HealthCheck")}
}

func (_c *ServerService_HealthCheck_Call) Run(run func()) *ServerService_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerService_HealthCheck_Call) Return(s string) *ServerService_HealthCheck_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ServerService_HealthCheck_Call) RunAndReturn(run func() string) *ServerService_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}
